<!DOCTYPE html>
<html>
<head>
  <% include ../partials/header.ejs %>
</head>
<script src="/socket.io/socket.io.js"></script>
<script>
  var socket = io();
  var user = <%-JSON.stringify(user)%>;
  var mission = <%-JSON.stringify(mission)%>;
  var missionActive = false;

  socket.on('connect', function(){
    var pack = {
      'user': user,
      'mission': mission
    };

    $("#yourItems").html("<h2> Your Items: </h2>");
    for(var i=0; i< user.items.length; i++){
      $("#yourItems").append('<hr><div class="row yourItem" itemID="'+i+'"><img src="'+user.items[i].img+'" class="col-xs-4"><div class="col-xs-6"><button class="row" type="button">' + user.items[i].name + '</button><p class="row">'+ user.items[i].desc +'</p></div></div>');
    }
    $("#yourItems").append("<hr>");

    socket.emit('user info', pack);
  });

  socket.on('update users', function(missionU){
    if(missionU.name === mission.name){
      mission.users = missionU.users; //sets local mission users variable
      $("#activeUsers").html("<h2> Active users on this Mission: </h2>");
      for(var i=0; i< mission.users.length; i++){
        $("#activeUsers").append("<hr><h3>"+mission.users[i]+"</h3>");
      }
      $("#activeUsers").append("<hr>");
    }
  });

$(document).ready(function(){
  var canvas, ctx, w, h;
  var hacking = null; //checks if we're currently hacking a space
  var hacking_tm = null; //checks if teammate is currently hacking a spot
  var p2_on_goal = false;

  //Lets save the cell width in a variable for easy control
  var cw = 50;
  var d = null; //keyboard input movement variable
  var score;

  var game_board = new Object();

  var players = [];

  $("#startmission").click(function(){
    var leng = mission.board.length;
    $("#activePage").html('<canvas id="canvas" width="'+(leng * cw)+'" height="'+(leng * cw)+'"></canvas>');
    missionActive = true;
    //Canvas stuff
    canvas = $("#canvas")[0];
    ctx = canvas.getContext("2d");
    w = $("#canvas").width();
    h = $("#canvas").height();
    ctx.font = ("30px Arial");
    ctx.fillText("Waiting for all users to be ready...", cw, cw);

    // draw (Waiting for other player) on canvas
    var pack = {
          'user': user,
          'mission': mission
    };
    socket.emit('user ready', pack);

  });

  $("#yourItems").on("click", ".yourItem", function(){
    var itemID = $(this).attr('itemID');
    var item = user.items[itemID];
    console.log(itemID);
    console.log(item);

    switch(item.key){
      case 'P': //teleporter af
        for(var x = -1; x < 2; x=x+2){
          //check if theres a valid left/right movement
          if(players[user.i].pos[0] + x >= 0 && players[user.i].pos[0] + x < game_board.board.length) {
            if(game_board.board[players[user.i].pos[0] + x][players[user.i].pos[1]].color === 'black') {
              if(game_board.board[players[user.i].pos[0] + x + x][players[user.i].pos[1]].walk === true) {
                players[user.i].pos[0]+=(x+x);
                break;
              }
            }
          }
          //check if there's a valid up/down movement
          if(players[user.i].pos[1] + x >= 0 && players[user.i].pos[1] + x < game_board.board.length) {
            if(game_board.board[players[user.i].pos[0]][players[user.i].pos[1] + x].color === 'black') {
              if(game_board.board[players[user.i].pos[0]][players[user.i].pos[1] + x + x].walk === true) {
                players[user.i].pos[1] += (x + x);
                break;
              }
            }
          }

        }
        break;
      case 'G':
        //code
        break;
      case 'Y': //stun gunner
        console.log("stun gun action!");
        var update_board = false;
        var pack = new Object();
        for(var x = -2; x < 3; x++){
          //check if new value is valid
          if(players[user.i].pos[0] + x >= 0 && players[user.i].pos[0] + x < game_board.board.length) {
            console.log("checking left/right: " + game_board.board[players[user.i].pos[0] + x][players[user.i].pos[1]].type);
            if(game_board.board[players[user.i].pos[0] + x][players[user.i].pos[1]].type == 'R') {
              update_board = true;
              pack.userIndex = user.i;
              pack.pos = [players[user.i].pos[0] + x, players[user.i].pos[1]];
              pack.color = 'LightGrey';
              pack.type = ' ';
              pack.walk = true;
              break;
            }
          }
          if(players[user.i].pos[1] + x >= 0 && players[user.i].pos[1] + x < game_board.board.length) {
            console.log("checking above/below: " + game_board.board[players[user.i].pos[0]][players[user.i].pos[1] + x].type);
            if(game_board.board[players[user.i].pos[0]][players[user.i].pos[1]+x].type == 'R') {
              update_board = true;
              pack.userIndex = user.i;
              pack.pos = [players[user.i].pos[0], players[user.i].pos[1]+x];
              pack.color = 'LightGrey';
              pack.type = ' ';
              pack.walk = true;
              break;
            }
          }
          
        }
        if(update_board == true){
          socket.emit('update board', pack);
        }
        break;
      case 'B':
        //cpde
        break;
      default:
        //code
        break;
    }
  });
  
  function init()
  {
    create_players();
    create_board(); //Now we can see the food particle
    //finally lets display the score
    score = 500;
    
    //Lets move the snake now using a timer which will trigger the paint function
    //every 60ms
    if(typeof game_loop != "undefined") clearInterval(game_loop);
    game_loop = setInterval(paint, 60);

  }
  
  function create_players()
  {
    for(var i = 0; i < mission.users.length; i++)
    {
      var player = new Object();
      player.name = mission.users[i];
      players.push(player)
    }
  }
  
  //Lets create the board now
  function create_board()
  {
    var hp, jp, tp;
    var hc = [];
    var jc = [];
    var tc = [];
    game_board.grid = mission.board;
    game_board.numKeys = 0;
    game_board.keysCollected = 0;
    game_board.board = new Array(game_board.grid.length);
    for(var i = 0; i < game_board.grid.length; i++)
    {
      game_board.board[i] = new Array(game_board.grid.length);
    }
    for(var i = 0; i < game_board.grid.length; i++)
    {
      var currentCol = game_board.grid[i];
      for(var j = 0; j < currentCol.length; j++)
      {
        var cell = new Object();
        cell.type = currentCol[j];
        switch(currentCol[j]) {
          case ' ':
            cell.color = "LightGrey";
            cell.walk = true;
            break;
          case 'O':
            cell.color = "black";
            cell.destructable = false;
            cell.walk = false;
            break;
          case 'o':
            cell.color = "#303030";
            cell.destructable = true;
            cell.walk = false;
            break;
          case 'R':
            cell.color = "red"
            cell.walk = false;
            break;
          case 'H':
            cell.color = "green"
            hp = cell;
            cell.walk = true;
            break;
          case 'J':
            cell.color = "green"
            jp = cell;
            cell.walk = true;
            break;
          case 'K':
            cell.color = "yellow"
            cell.walk = true;
            game_board.numKeys++;
            break;
          case 'h':
            cell.color = "black"
            hc.push(cell);
            cell.walk = false;
            break;
          case 'j':
            cell.color = "black"
            jc.push(cell);
            cell.walk = false;
            break;
          case '1':
            players[0].pos = [j,i];
            cell.type = ' ';
            cell.color = "LightGrey"
            cell.walk = true;
            break;
          case '2':
            players[1].pos = [j,i];
            cell.type = ' ';
            cell.color = "LightGrey"
            cell.walk = true;
            break;
          case 'T':
            cell.color = "green"
            cell.walk = true;
            tp = cell;
            break;
          case 't':
            cell.color = "black"
            cell.walk = false;
            tc.push(cell);
            break;
          case 'P':
            cell.color = "pink"
            cell.walk = true;
            break
          case '*':
            cell.color = "purple"
            cell.walk = true;
            break;
          default:
            console.log("you suck " + currentCol[j]);
        }
        game_board.board[j][i] = cell;
      }
    }
    hp.child = hc;
    jp.child = jc;
    tp.child = tc;
  }
  
  //Lets paint the board now
  function paint()
  {

   
    for(var i = 0; i < game_board.board.length; i++)
    {
      var currentRow = game_board.board[i];
      for(var j = 0; j < currentRow.length; j++)
      {

        //Lets paint 10px wide cells
        for(var k = 0; k < players.length; k++){
          if(Math.abs(players[k].pos[0] - i) <= 2 && Math.abs(players[k].pos[1] - j) <= 2){
              paint_cell(i,j, game_board.board[i][j].color);
              
            break;

          }
          else
            paint_cell(i,j,"white");
        }
      }
    }

    for(var i = 0; i < players.length; i++)
    {
      //Lets paint 10px wide cells
      paint_cell(players[i].pos[0], players[i].pos[1], "blue");
    }

    d = null;

  }
  
  //Lets first create a generic function to paint cells
  function paint_cell(x, y, color)
  {
    ctx.fillStyle = color;
    ctx.fillRect(x*cw, y*cw, cw, cw);
    ctx.strokeStyle = "white";
    ctx.strokeRect(x*cw, y*cw, cw, cw);
    ctx.strokeStyle = "black";
    ctx.strokeRect(0, 0, w, h);
  }

  //Lets add the keyboard controls now
  $(document).keydown(function(e){
    e.preventDefault();
    var should_update = false;
    var key = e.which;
    //We will add another clause to prevent reverse gear
    if(key == "37") d = "left";
    else if(key == "38") d = "up";
    else if(key == "39") d = "right";
    else if(key == "40") d = "down";

    //Lets add proper direction based movement now
    if(d == "right" && players[user.i].pos[0] + 1 < game_board.grid.length){
      var val = game_board.board[players[user.i].pos[0] + 1][players[user.i].pos[1]];
      if(val.walk == true) {
        score--;
        should_update = true;
        players[user.i].pos[0]++;
      }
    }
    else if(d == "left" && players[user.i].pos[0] - 1 >= 0) {
      var val = game_board.board[players[user.i].pos[0] - 1][players[user.i].pos[1]];
      if(val.walk == true) {
        should_update = true;
        players[user.i].pos[0]--;
      }
    }
    else if(d == "up" && players[user.i].pos[1] - 1 >= 0) {
      var val = game_board.board[players[user.i].pos[0]][players[user.i].pos[1] - 1];
      if(val.walk == true) {
        score--;
        should_update = true;
        players[user.i].pos[1]--;
      }
    }
    else if(d == "down" && players[user.i].pos[1] + 1 < game_board.grid[0].length) {
      var val = game_board.board[players[user.i].pos[0]][players[user.i].pos[1] + 1];
      if(val.walk == true) {
        score--;
        should_update = true;
        players[user.i].pos[1]++;
      }
    }

    if(hacking !== null) {
      for(var i = 0; i < hacking.child.length; i++){
        hacking.child[i].walk = false;
        hacking.child[i].color = 'black';
      }
      hacking = null;
    }

    //check if we hit a key or the goal state
    var curr_cell = game_board.board[players[user.i].pos[0]][players[user.i].pos[1]];
    if(curr_cell.type == 'J' || curr_cell.type == 'H' || curr_cell.type == 'T'){
      for(var q = 0; q < user.item_keys.length; q++){
        if(user.item_keys[q] == 1){
          hacking = curr_cell;
          for(var i = 0; i < curr_cell.child.length; i++){
            curr_cell.child[i].walk = true;
            curr_cell.child[i].color = 'LightGrey';
          }
          break;
        }
      }
    }
    else if(curr_cell.type == 'K') {
      game_board.keysCollected++;
      curr_cell.type = ' ';
      curr_cell.color = 'LightGrey';
    }
    else if(curr_cell.type == '*'){
      if(game_board.keysCollected == game_board.numKeys && p2_on_goal){
        clearInterval(game_loop);
        $("#activePage").html('<h3> YOU WIN! Final Score: ' + score + '</h3>');
        var pack = {
          user: user,
          mission: mission,
          score: score
        }
        socket.emit('game over', pack);
      }
    }
    
    if(should_update == true) {
      var pack = {
        items: user.item_keys,
        userIndex: user.i,
        pos: players[user.i].pos,
        mission: mission
      }
      socket.emit('user movement', pack);
    }
  })

  socket.on('begin game', function(usersReady){
    for(var i = 0; i < mission.users.length; i++){
      if(mission.users[i] === user.user){
        user.i = i;
      }
    }
    if(usersReady == 2) {
      console.log("START");
      init()
    }
  });

  socket.on('board update', function(pack){
    var curr_cell = game_board.board[pack.pos[0]][pack.pos[1]];
    curr_cell.color = pack.color;
    curr_cell.type = pack.type;
    curr_cell.walk = pack.walk;
  });

  socket.on('user move', function(pack){
    if(pack.userIndex !== user.i)
    {
      score--;

      players[pack.userIndex].pos = pack.pos;

      if(hacking_tm !== null) {
        for(var i = 0; i < hacking_tm.child.length; i++){
          hacking_tm.child[i].walk = false;
          hacking_tm.child[i].color = 'black';
        }
        hacking_tm = null;
      }

      //check if we hit a key or the goal state
      var curr_cell = game_board.board[players[pack.userIndex].pos[0]][players[pack.userIndex].pos[1]];
      if(curr_cell.type == 'J' || curr_cell.type == 'H' || curr_cell.type == 'T'){
        for(var q = 0; q < pack.items.length; q++){
          if(pack.items[q] == 1){ //if this dude is the hacker
            hacking_tm = curr_cell;
            for(var i = 0; i < curr_cell.child.length; i++){
              curr_cell.child[i].walk = true;
              curr_cell.child[i].color = 'LightGrey';
            }
            break;
          }
        }
      }
      else if(curr_cell.type == 'K') {
        game_board.keysCollected++;
        console.log("key collected! Total keys: "+ game_board.keysCollected);
        curr_cell.type = ' ';
        curr_cell.color = 'LightGrey';
      }
      else if(curr_cell.type == '*') {
        if(game_board.keysCollected == game_board.numKeys){
          p2_on_goal = true;
          if(game_board.board[players[user.i].pos[0]][players[user.i].pos[1]].type == '*') {
            clearInterval(game_loop);
            $("#activePage").html('<h3> YOU WIN! Final Score: ' + score+'</h3>');
            var pack = {
              user: user,
              mission: mission,
              score: score
            }
            socket.emit('game over', pack);
          }
        }
      }
      else
        p2_on_goal = false;
    }
  });

})
</script>

<body>

  <% include ../partials/nav.ejs %>

<div class="jumbotron text-center">
  <div class="container">
    <h1><%=mission.name%></h1>
  </div>
</div>

<div id="activePage">
  <button type="button" class="btn" id="startmission"> Start Mission </button>
  <div id="activeUsers" class="container">
  </div>

</div>
<div class="row fl">
  <div id="yourItems" class="container col-xs-6">
  </div>
  <div class="col-xs-6" id="arrows">
    <button id="up" class="row btn center-block arr">
      &uarr;
    </button>
    <div id="left" class="col-xs-6 center-block arr">
      <button class="btn pull-right">
        &larr;
      </button>
    </div>

    <div id="right" class="col-xs-6 center-block arr">
      <button class="btn">
        &rarr;
      </button>
    </div>
    <button id="down" class="row btn center-block arr">
      &darr;
    </button>
  </div>
</div>
</body>
</html>
